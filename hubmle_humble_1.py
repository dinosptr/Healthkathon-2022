# -*- coding: utf-8 -*-
"""HUBMLe HUMBLE - 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19A5wiCY1l9ySi0cPSMSIhZw9Vo8km7DW

# Data Preparation
"""

from google.colab import drive
drive.mount('/content/drive')

# library

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

!unzip '/content/drive/MyDrive/Healthkathon/Tahap1/Dataset-Healthkathon.zip'

bpjs_ori = pd.read_csv("/content/sampling_healtkathon2022.csv", dtype={'dati2':'int16','typefaskes':'category','jenkel':'category',
                                'politujuan':'category','jenispel':'int8',
                               'kelasrawat':'int8', 'label':'int64', 'usia':'int8', 'kelasrawat':'int8',
                                'kdsa':'category', 'kdsp':'category', 'kdsr':'category', 'kdsi':'category', 'kdsd':'category', 'cbg':'category'})
bpjs = bpjs_ori.copy()

bpjs.info()

pd.set_option('display.max_columns', None)
bpjs.describe().apply(lambda s: s.apply('{0:.2f}'.format))

"""Berdasarkan penjelasan data *numerical* diatas, terdapat beberapa hal yang perlu diperhatikan:  
1. Pada tabel column usia, terdapat usia 0 tahun dan 110 tahun.
2. Kemudian pada column biaya, terdapat biaya paling tinggi yaitu Rp. 401.696.600. Ini merupakan sebuah outlier yang dapat merusak model.
"""

bpjs.describe(include = ['object', 'category'])

"""Berdasarkan data *category* diatas perlu diperhatikan beberapa hal seperti:  
1. Pada column kdsa, kdsp, kdsr, kdsi, kdsd. Terdapat tipe yang sering muncul yaitu None, dimana jumlah frequency nya adalah 11 juta lebih dan hampir menyamain keseluruhan jumlah data. Ini adalah hal yang tidak wajar, karena "None" biasanya merupakan sebuah missing values.
2. Kemudian untuk column diagfktp dan cbg memiliki jumlah uniq values yang tergolong cukup banyak dan harus diperhatikan untuk bentuk dari uniq tersebut
"""

bpjs.isna().sum()

missing_jenkel = len(bpjs[(bpjs['jenkel'].isna()) & bpjs['label'] == 1])
missing_pisat = len(bpjs[(bpjs['pisat'].isna()) & bpjs['label'] == 1])
missing_politujuan = len(bpjs[(bpjs['politujuan'].isna()) & bpjs['label'] == 1])
missing_diagfktp = len(bpjs[(bpjs['diagfktp'].isna()) & bpjs['label'] == 1])
missing_biaya = len(bpjs[(bpjs['biaya'].isna()) & bpjs['label'] == 1])
missing_jenispulang = len(bpjs[(bpjs['jenispulang'].isna()) & bpjs['label'] == 1])

print("Berikut adalah jumlah label jenkel dengan missing values pada label 1: ", missing_jenkel)
print("Berikut adalah jumlah label pisat dengan missing values pada label 1: ", missing_pisat)
print("Berikut adalah jumlah label politujuan dengan missing values pada label 1: ", missing_politujuan)
print("Berikut adalah jumlah label diagfktp dengan missing values pada label 1: ", missing_diagfktp)
print("Berikut adalah jumlah label biaya dengan missing values pada label 1: ", missing_biaya)
print("Berikut adalah jumlah label jenispulang dengan missing values pada label 1: ", missing_jenispulang)

"""Berdasarkan hasil diatas terlihat pada label 1, kolom missing values sebanyak 55rb dari 57ribu. Ini menunjukkan bahwa pengisian missing values bisa sangat berpengaruh pada kolom biaya. Kemudian pada kolom politujuan terdapat 53rb missing values pada kolom 1 dari 4juta data. Dan pada kolom lain yang berlabel 1 tidak terlalu banyak missing values, sehinggal bisa diisi dengan nilai modus dari keseluruhan data."""

mode_bpjs_1 = bpjs['politujuan'][(bpjs['label']==1)].mode()[0]
mode_bpjs_0 = bpjs['politujuan'][(bpjs['label']==0)].mode()[0]
print('Nilai modus pada politujuan berlabel 1 adalah: ', mode_bpjs_1)
print('Nilai modus pada politujuan berlabel 0 adalah: ', mode_bpjs_0)

"""Dilakukan pengecekan terhadap nilai modus politujuan berdasarkan label dan mendapatkan nilai modus IGD pada keduanya, ini dapat digunakan untuk pengisian missing values pada kolom politujuan."""

label_0 = bpjs[bpjs['label']==0]
label_0['politujuan'].mode()

label_1 = bpjs[bpjs['label'] == 1]
label_1['politujuan'].mode()

"""# Data Cleaning"""

bpjs = bpjs.drop_duplicates(keep='first')
bpjs

bpjs.isna().sum()

"""## Check persentase missing values"""

percent_missing = bpjs.isna().sum() * 100 / len(bpjs)
percent_missing.sort_values(ascending=False)

"""## Handling Missing values"""

bpjs = bpjs.replace(['NONE','None', 'NaN', 'nan'], np.nan)
bpjs.isna().sum()

"""## Check persentase missing values after replace string None, NaN, none and nan"""

percent_missing = bpjs.isna().sum() * 100 / len(bpjs)
percent_missing.sort_values(ascending=False)

"""Setelah melakukan pergantian data dari None dll menjadi Missing values, terdapat beberapa column yang terjadi mengalami kenaikan jumlah missing values yaitu diagfktp, kdsa, kdsp, kdsr, kdsi, kdsd. Terdapat beberapa baris yang memiliki nilai null juga, yaitu pada column jenkel, pisat, politujuan, biaya, jenispulang. Missing values bisa terjadi karena beberapa hal seperti admin yang tidak memasukkan data tersebut ke database karena pengguna enggan memberikan datanya atau memang ada kesalahan teknis dari proses input data."""

bpjs['jenkel'] = bpjs['jenkel'].fillna(bpjs['jenkel'].mode()[0])
bpjs['pisat'] = bpjs['pisat'].fillna(bpjs['pisat'].mode()[0])
bpjs['jenispulang'] = bpjs['jenispulang'].fillna(bpjs['jenispulang'].mode()[0])
bpjs['diagfktp'] = bpjs['diagfktp'].fillna(bpjs['diagfktp'].mode()[0])
bpjs['biaya'] = bpjs['biaya'].fillna(0)
bpjs['politujuan'] = bpjs['politujuan'].fillna(bpjs['politujuan'].mode()[0])

"""Cara diatas merupakan cara untuk mengisi *missing values* yang ada. bisa terlihat pada kolom jenkel, pisat, jenispulang, diagfktp, dan politujuan. Apabila terdapat missing values maka akan diisi oleh modus dari kolom tersebut, karena meskipun beberapa kolom bukan tipe category(pisat, jenispulang) akan tetapi maksud dari isi kolom tersebut bersifat category. Kemudian untuk kolom biaya akan diisi dengan nilai 0, karena data kosong dianggap tidak melakukan pembayaran."""

bpjs.isna().sum()

"""Untuk kolom kdsa, kdsp, kdsr, kdsi, kdsd akan dihapus pada bagian Feature Engineering karena missing values-nya hampir mendekati 100%.

## Print Unique values diagfktp & cbg
"""

# np.set_printoptions(threshold=np.inf) # agar dapat melihat keseluruhan nilai
# np.unique(bpjs['cbg'], return_counts=True)[0]

# np.unique(bpjs['cbg'], return_counts=True)[1]

# np.unique(bpjs['diagfktp'].fillna(""), return_counts=True)[0]

"""Berdasarkan data uniq dari kolom fktp terdapat beberapa data yang tidak memiliki arti terkait diagfktp seperti : '', '-', '--', '.', '0001217347', '0001262881','02.31', '03', '34.89', '=='. Dan juga terdapat data uniq yang berulang seperti a01.1 dan A01.0 yang nantinya akan disesuaikan pada bagian Feature Engineering"""

# np.unique(bpjs['diagfktp'].fillna(""), return_counts=True)[1]

# print(len(bpjs[(bpjs['diagfktp'] == '-') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '--') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '.') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '==') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '0001217347') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '0001262881') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '02.31') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '03') & (bpjs['label'] == 1)]))
# print(len(bpjs[(bpjs['diagfktp'] == '34.89') & (bpjs['label'] == 1)]))

# bpjs.shape

# indexAge = bpjs[
#     (bpjs['diagfktp'] == '==') | (bpjs['diagfktp'] == '--') |
#     (bpjs['diagfktp'] == '-') | (bpjs['diagfktp'] == '.') |
#     (bpjs['diagfktp'] == '0001217347') | (bpjs['diagfktp'] == '0001262881') |
#     (bpjs['diagfktp'] == '02.31') | (bpjs['diagfktp'] == '03') |
#     (bpjs['diagfktp'] == '34.89')
# ].index
# bpjs.drop(indexAge , inplace=True)
# bpjs.shape

# bpjs.isna().sum()

"""# Explanatory Data Analysis"""

import seaborn as sns

ax = sns.countplot(bpjs["label"])
for p in ax.patches:
   ax.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')
plt.title("target variable")

"""## Jumlah transaksi biaya pada label 1"""

label_1 = bpjs[bpjs['label'] == 1]

label_0 = bpjs[bpjs['label'] == 0]

"""## Jumlah transaksi biaya pada label 1"""

jumlah_notransaksi_biaya = label_1[label_1['biaya'] == -1].shape[0]
jumlah_transaksi0_biaya = label_1[label_1['biaya'] == 0].shape[0]
jumlah_transaksi_lebihdari_0_biaya = label_1[label_1['biaya'] > 0].shape[0]

print('Jumlah tanpa transaksi pada label 1 adalah sebanyak: ', jumlah_notransaksi_biaya)
print('Jumlah transaksi 0 rupiah pada label 1 adalah sebanyak: ',jumlah_transaksi0_biaya)
print('Jumlah transaksi lebih dari 0 rupiah pada label 1 adalah sebanyak: ',jumlah_transaksi_lebihdari_0_biaya)

"""## Jumlah biaya pada label 1 dan politujuan = IGD (modus)"""

jumlah_notransaksi_biaya_1 = label_1[label_1['biaya'] == -1].shape[0]
jumlah_transaksi0_biaya_1 = label_1[label_1['biaya'] == 0].shape[0]
jumlah_transaksi_lebihdari_1_biaya_1 = label_1[label_1['biaya'] > 0].shape[0]

print('Jumlah tanpa transaksi pada label 1 adalah sebanyak: ', jumlah_notransaksi_biaya_1)
print('Jumlah transaksi 0 rupiah pada label 1 adalah sebanyak: ',jumlah_transaksi0_biaya_1)
print('Jumlah transaksi lebih dari 0 rupiah pada label 1 adalah sebanyak: ',jumlah_transaksi_lebihdari_1_biaya_1)

jumlah_notransaksi_biaya_IGD = label_1[(label_1['biaya'] == -1) & (label_1['politujuan'] == 'IGD')].shape[0]
jumlah_transaksi0_biaya_IGD = label_1[label_1['biaya'] == 0 & (label_1['politujuan'] == 'IGD')].shape[0]
jumlah_transaksi_lebihdari_0_biaya_IGD = label_1[label_1['biaya'] > 0 & (label_1['politujuan'] == 'IGD')].shape[0]

print('Jumlah tanpa transaksi pada label 1 adalah sebanyak: ', jumlah_notransaksi_biaya_IGD)
print('Jumlah transaksi 0 rupiah pada label 1 adalah sebanyak: ',jumlah_transaksi0_biaya_IGD)
print('Jumlah transaksi lebih dari 0 rupiah pada label 1 adalah sebanyak: ',jumlah_transaksi_lebihdari_0_biaya_IGD)

jumlah_notransaksi_biaya_0 = label_0[label_0['biaya'] == -1].shape[0]
jumlah_transaksi0_biaya_0 = label_0[label_0['biaya'] == 0].shape[0]
jumlah_transaksi_lebihdari_0_biaya_0 = label_0[label_0['biaya'] > 0].shape[0]

print('Jumlah tanpa transaksi pada label 0 adalah sebanyak: ', jumlah_notransaksi_biaya_0)
print('Jumlah transaksi 0 rupiah pada label 0 adalah sebanyak: ',jumlah_transaksi0_biaya_0)
print('Jumlah transaksi lebih dari 0 rupiah pada label 0 adalah sebanyak: ',jumlah_transaksi_lebihdari_0_biaya_0)

"""## label 0 biaya dan IGD"""

jumlah_notransaksi_biaya_0_IGD = label_0[(label_0['biaya'] == -1) & (label_0['politujuan'] == 'IGD')].shape[0]
jumlah_transaksi0_biaya_0_IGD = label_0[label_0['biaya'] == 0 & (label_0['politujuan'] == 'IGD')].shape[0]
jumlah_transaksi_lebihdari_0_biaya_0_IGD = label_0[label_0['biaya'] > 0 & (label_0['politujuan'] == 'IGD')].shape[0]

print('Jumlah tanpa transaksi pada label 0 adalah sebanyak: ', jumlah_notransaksi_biaya_0_IGD)
print('Jumlah transaksi 0 rupiah pada label 0 adalah sebanyak: ',jumlah_transaksi0_biaya_0_IGD)
print('Jumlah transaksi lebih dari 0 rupiah pada label 0 adalah sebanyak: ',jumlah_transaksi_lebihdari_0_biaya_0_IGD)

"""Berdasarkan data diatas sebanyak 35% tanpa transaksi bisa didefinisikan sebagai inefisiensi.

Berdasarkan 2 informasi diatas, berdasarkan keseluruhan data berdasarkan label, yang memiliki biaya > 0 memiliki jumlah data paling banyak. Ini berarti kita tidak bisa hanya bergantung pada biaya yang lebih dari 0 untuk menentukan efisiensi dan inefisiensi.
"""

label_0[(label_0['biaya'] > 0) & label_0['usia'] == 0]

label_1[(label_1['biaya'] > 0) & (label_1['usia'] == 0)].shape

label_1[(label_1['biaya'] > 0) & (label_1['usia'] == 0) & (label_1['politujuan'] == 'IGD')].shape

label_1_biayalebihdari0 = label_1[(label_1['biaya'] > 0)]
np.unique(label_1_biayalebihdari0['usia'], return_counts=True)

label_0_biayalebihdari0 = label_0[(label_0['biaya'] > 0)]
np.unique(label_0_biayalebihdari0['usia'], return_counts=True)

"""Berdasarkan data umur dari kedua label, pasien lebih cenderung berumur 0 tahun pada keduanya.

## Print uniq dan count typefaskes pada label 1 dan 0
"""

np.unique(label_1['typefaskes'], return_counts=True)

# type(label_1['typefaskes'])

np.unique(label_0['typefaskes'], return_counts=True)

"""## print top 10 uniq values di kolom politujuan pada label 0 dan 1 dengan biaya kurang dari 0 (missing values)"""

from operator import itemgetter

def find_top_n_indices(data, top=3):
    indexed = enumerate(data)  # create pairs [(0, v1), (1, v2)...]
    sorted_data = sorted(indexed,
                         key=itemgetter(1),   # sort pairs by value
                         reverse=True)       # in reversed order
    return [d[0] for d in sorted_data[:top]]  # take first N indices

label_1_politujuan_kurang0 = label_1[(label_1['biaya'] == -1)]
list_politujuan = list(np.unique(label_1_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[0])
list_jumlah_politujuan = list(np.unique(label_1_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[1])
list_top_politujuan = find_top_n_indices(list_jumlah_politujuan, top=20)
list_top_politujuan
for i in list_top_politujuan:
  print(list_politujuan[i], " dengan total jumlah ", list_jumlah_politujuan[i])

label_0_politujuan_kurang0 = label_0[(label_0['biaya'] == -1)]
list_politujuan = list(np.unique(label_0_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[0])
list_jumlah_politujuan = list(np.unique(label_0_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[1])
list_top_politujuan = find_top_n_indices(list_jumlah_politujuan, top=20)
list_top_politujuan
for i in list_top_politujuan:
  print(list_politujuan[i], " dengan total jumlah ", list_jumlah_politujuan[i])

"""## print top 10 uniq values di kolom typefaskes pada label 0 dan 1 dengan biaya kurang dari 0 (missing values)"""

label_0_typefaskes_kurang0 = label_0[(label_0['biaya'] == -1)]
list_typefaskes = list(np.unique(label_0_typefaskes_kurang0['typefaskes'].astype('category'), return_counts=True)[0])
list_jumlah_typefaskes = list(np.unique(label_0_typefaskes_kurang0['typefaskes'].astype('category'), return_counts=True)[1])
list_top_typefaskes = find_top_n_indices(list_jumlah_typefaskes, top=20)
list_top_typefaskes
for i in list_top_typefaskes:
  print(list_typefaskes[i], " dengan total jumlah ", list_jumlah_typefaskes[i])

label_1_typefaskes_kurang0 = label_1[(label_1['biaya'] == -1)]
list_typefaskes = list(np.unique(label_1_typefaskes_kurang0['typefaskes'].astype('category'), return_counts=True)[0])
list_jumlah_typefaskes = list(np.unique(label_1_typefaskes_kurang0['typefaskes'].astype('category'), return_counts=True)[1])
list_top_typefaskes = find_top_n_indices(list_jumlah_typefaskes, top=20)
list_top_typefaskes
for i in list_top_typefaskes:
  print(list_typefaskes[i], " dengan total jumlah ", list_jumlah_typefaskes[i])

"""## Print top 10 uniq values di kolom diagfktp pada label 0 dan 1 dengan biaya kurang dari 0 (missing values)"""

label_0_diagfktp_kurang0 = label_0[(label_0['biaya'] == -1)]
list_diagfktp = list(np.unique(label_0_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[0])
list_jumlah_diagfktp = list(np.unique(label_0_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[1])
list_top_diagfktp = find_top_n_indices(list_jumlah_diagfktp, top=20)
list_top_diagfktp
for i in list_top_diagfktp:
  print(list_diagfktp[i], " dengan total jumlah ", list_jumlah_diagfktp[i])

label_1_diagfktp_kurang0 = label_1[(label_1['biaya'] == -1)]
list_diagfktp = list(np.unique(label_1_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[0])
list_jumlah_diagfktp = list(np.unique(label_1_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[1])
list_top_diagfktp = find_top_n_indices(list_jumlah_diagfktp, top=20)
list_top_diagfktp
for i in list_top_diagfktp:
  print(list_diagfktp[i], " dengan total jumlah ", list_jumlah_diagfktp[i])

"""## print top 10 uniq values di kolom kelasrawat pada label 0 dan 1 dengan biaya kurang dari 0 (missing values)"""

label_0_kelasrawat_kurang0 = label_0[(label_0['biaya'] == -1)]
list_kelasrawat = list(np.unique(label_0_kelasrawat_kurang0['kelasrawat'].astype('category'), return_counts=True)[0])
list_jumlah_kelasrawat = list(np.unique(label_0_kelasrawat_kurang0['kelasrawat'].astype('category'), return_counts=True)[1])
list_top_kelasrawat = find_top_n_indices(list_jumlah_kelasrawat, top=20)
list_top_kelasrawat
for i in list_top_kelasrawat:
  print(list_kelasrawat[i], " dengan total jumlah ", list_jumlah_kelasrawat[i])

label_1_kelasrawat_kurang0 = label_1[(label_1['biaya'] == -1)]
list_kelasrawat = list(np.unique(label_1_kelasrawat_kurang0['kelasrawat'].astype('category'), return_counts=True)[0])
list_jumlah_kelasrawat = list(np.unique(label_1_kelasrawat_kurang0['kelasrawat'].astype('category'), return_counts=True)[1])
list_top_kelasrawat = find_top_n_indices(list_jumlah_kelasrawat, top=20)
list_top_kelasrawat
for i in list_top_kelasrawat:
  print(list_kelasrawat[i], " dengan total jumlah ", list_jumlah_kelasrawat[i])

"""## print top 10 uniq values dikolom jenispel pada label 0 dan 1 dengan biaya kurang dari 0 (missing values)"""

label_0_jenispel_kurang0 = label_0[(label_0['biaya'] == -1)]
list_jenispel = list(np.unique(label_0_jenispel_kurang0['jenispel'].astype('category'), return_counts=True)[0])
list_jumlah_jenispel = list(np.unique(label_0_jenispel_kurang0['jenispel'].astype('category'), return_counts=True)[1])
list_top_jenispel = find_top_n_indices(list_jumlah_jenispel, top=20)
list_top_jenispel
for i in list_top_jenispel:
  print(list_jenispel[i], " dengan total jumlah ", list_jumlah_jenispel[i])

label_1_jenispel_kurang0 = label_1[(label_1['biaya'] == -1)]
list_jenispel = list(np.unique(label_1_jenispel_kurang0['jenispel'].astype('category'), return_counts=True)[0])
list_jumlah_jenispel = list(np.unique(label_1_jenispel_kurang0['jenispel'].astype('category'), return_counts=True)[1])
list_top_jenispel = find_top_n_indices(list_jumlah_jenispel, top=20)
list_top_jenispel
for i in list_top_jenispel:
  print(list_jenispel[i], " dengan total jumlah ", list_jumlah_jenispel[i])

"""## print top 10 uniq values dikolom politujuan pada label 0 dan 1 biaya > 0"""

label_0_politujuan_kurang0 = label_0[(label_0['biaya'] > 0)]
list_politujuan = list(np.unique(label_0_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[0])
list_jumlah_politujuan = list(np.unique(label_0_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[1])
list_top_politujuan = find_top_n_indices(list_jumlah_politujuan, top=20)
list_top_politujuan
for i in list_top_politujuan:
  print(list_politujuan[i], " dengan total jumlah ", list_jumlah_politujuan[i])

label_1_politujuan_kurang0 = label_1[(label_1['biaya'] > 0)]
list_politujuan = list(np.unique(label_1_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[0])
list_jumlah_politujuan = list(np.unique(label_1_politujuan_kurang0['politujuan'].astype('category'), return_counts=True)[1])
list_top_politujuan = find_top_n_indices(list_jumlah_politujuan, top=20)
list_top_politujuan
for i in list_top_politujuan:
  print(list_politujuan[i], " dengan total jumlah ", list_jumlah_politujuan[i])

"""## print top 10 uniq values di kolom kelasrawat pada label 0 dan 1 biaya > 0"""

label_0_diagfktp_kurang0 = label_0[(label_0['biaya'] > 0)]
list_diagfktp = list(np.unique(label_0_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[0])
list_jumlah_diagfktp = list(np.unique(label_0_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[1])
list_top_diagfktp = find_top_n_indices(list_jumlah_diagfktp, top=20)
list_top_diagfktp
for i in list_top_diagfktp:
  print(list_diagfktp[i], " dengan total jumlah ", list_jumlah_diagfktp[i])

label_1_diagfktp_kurang0 = label_1[(label_1['biaya'] > 0)]
list_diagfktp = list(np.unique(label_1_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[0])
list_jumlah_diagfktp = list(np.unique(label_1_diagfktp_kurang0['diagfktp'].astype('category'), return_counts=True)[1])
list_top_diagfktp = find_top_n_indices(list_jumlah_diagfktp, top=20)
list_top_diagfktp
for i in list_top_diagfktp:
  print(list_diagfktp[i], " dengan total jumlah ", list_jumlah_diagfktp[i])



"""## print uniq dan jumlahnya kolom cbg pada label 0 atau 1"""

# np.unique(label_1['cbg'].astype('category'), return_counts=True)

list_dati2 = list(np.unique(label_1['cbg'].astype('category'), return_counts=True)[0])
list_jumlah_dati2 = list(np.unique(label_1['cbg'].astype('category'), return_counts=True)[1])
list_top_dati2 = find_top_n_indices(list_jumlah_dati2, top=20)
list_top_dati2
for i in list_top_dati2:
  print(list_dati2[i], " dengan total jumlah ", list_jumlah_dati2[i])

# label_1[(label_1['biaya'] == -1) & (label_1['politujuan'] == 'IGD') & (label_1['cbg'] == 'P-8-17-I')].shape[0]

list_dati2 = list(np.unique(label_0['cbg'].astype('category'), return_counts=True)[0])
list_jumlah_dati2 = list(np.unique(label_0['cbg'].astype('category'), return_counts=True)[1])
list_top_dati2 = find_top_n_indices(list_jumlah_dati2, top=10)
list_top_dati2
for i in list_top_dati2:
  print(list_dati2[i], " dengan total jumlah ", list_jumlah_dati2[i])

list_dati2 = list(np.unique(label_1['dati2'].astype('category'), return_counts=True)[0])
list_jumlah_dati2 = np.unique(label_1['dati2'].astype('category'), return_counts=True)[1]
list_top_dati2 = find_top_n_indices(list_jumlah_dati2, top=5)
for i in list_top_dati2:
  print(list_dati2.index(i))



# q = np.unique(label_1['typefaskes'], return_counts=True)[0]
# qq = np.unique(label_1['politujuan'], return_counts=True)[1]
# qq.tolist()[q.tolist().index('IGD')]

# qq.tolist()[q.tolist().index('IGD')]

# q = np.unique(label_1['politujuan'], return_counts=True)[0]
# qq = np.unique(label_1['politujuan'], return_counts=True)[1]
# qq.tolist()[q.tolist().index('IGD')]

"""## Jumlah kelamin berdasarkan label


"""

len_jenkel_P_0 = label_0[label_0['jenkel'] == 'P'].shape[0]
len_jenkel_L_0 = label_0[label_0['jenkel'] == 'L'].shape[0]
len_jenkel_P_1 = label_1[label_1['jenkel'] == 'P'].shape[0]
len_jenkel_L_1 = label_1[label_1['jenkel'] == 'L'].shape[0]

print('Jumlah Perempuan pada label 0 adalah: ', len_jenkel_P_0)
print('Jumlah Laki-Laki pada label 0 adalah: ', len_jenkel_L_0)
print('Jumlah Perempuan pada label 1 adalah: ', len_jenkel_P_1)
print('Jumlah Laki-Laki pada label 1 adalah: ', len_jenkel_L_1)

"""Berdasarkan hasil diatas jenis kelamin tidak terlalu berpengaruh pada penentuan inefisiensi dan efisiensi.

## Jumlah pisat berdasarkan label
"""

bpjs['pisat'].astype('category').unique()

len_pisat_1_0 = label_0[label_0['pisat'] == 1].shape[0]
len_pisat_2_0 = label_0[label_0['pisat'] == 2].shape[0]
len_pisat_3_0 = label_0[label_0['pisat'] == 3].shape[0]
len_pisat_4_0 = label_0[label_0['pisat'] == 4].shape[0]
len_pisat_5_0 = label_0[label_0['pisat'] == 5].shape[0]
len_pisat_1_1 = label_1[label_1['pisat'] == 1].shape[0]
len_pisat_2_1 = label_1[label_1['pisat'] == 2].shape[0]
len_pisat_3_1 = label_1[label_1['pisat'] == 3].shape[0]
len_pisat_4_1 = label_1[label_1['pisat'] == 4].shape[0]
len_pisat_5_1 = label_1[label_1['pisat'] == 5].shape[0]

print('Jumlah Pisat 1 pada label 0 adalah: ', len_pisat_1_0)
print('Jumlah Pisat 2 pada label 0 adalah: ', len_pisat_2_0)
print('Jumlah Pisat 3 pada label 0 adalah: ', len_pisat_3_0)
print('Jumlah Pisat 4 pada label 0 adalah: ', len_pisat_4_0)
print('Jumlah Pisat 5 pada label 0 adalah: ', len_pisat_5_0)
print('Jumlah Pisat 1 pada label 1 adalah: ', len_pisat_1_1)
print('Jumlah Pisat 2 pada label 1 adalah: ', len_pisat_2_1)
print('Jumlah Pisat 3 pada label 1 adalah: ', len_pisat_3_1)
print('Jumlah Pisat 4 pada label 1 adalah: ', len_pisat_4_1)
print('Jumlah Pisat 5 pada label 1 adalah: ', len_pisat_5_1)

"""Berdasarkan hasil diatas pisat 1,4,3,5,2 pada kedua label memiliki jumlah tertinggi.

## Jumlah jenispel berdasarkan label
"""

bpjs['jenispel'].astype('category').unique()

len_jenispel_1_0 = label_0[label_0['jenispel'] == 1].shape[0]
len_jenispel_2_0 = label_0[label_0['jenispel'] == 2].shape[0]
len_jenispel_1_1 = label_1[label_1['jenispel'] == 1].shape[0]
len_jenispel_2_1 = label_1[label_1['jenispel'] == 2].shape[0]

print('Jumlah jenispel 1 pada label 0 adalah: ', len_jenispel_1_0)
print('Jumlah jenispel 2 pada label 0 adalah: ', len_jenispel_2_0)
print('Jumlah jenispel 1 pada label 1 adalah: ', len_jenispel_1_1)
print('Jumlah jenispel 2 pada label 1 adalah: ', len_jenispel_2_1)

"""## Jumlah jenispulang berdasarkan label"""

bpjs['jenispulang'].astype('category').unique()

len_jenispulang_1_0 = label_0[label_0['jenispulang'] == 1].shape[0]
len_jenispulang_2_0 = label_0[label_0['jenispulang'] == 2].shape[0]
len_jenispulang_3_0 = label_0[label_0['jenispulang'] == 3].shape[0]
len_jenispulang_4_0 = label_0[label_0['jenispulang'] == 4].shape[0]
len_jenispulang_5_0 = label_0[label_0['jenispulang'] == 5].shape[0]
len_jenispulang_1_1 = label_1[label_1['jenispulang'] == 1].shape[0]
len_jenispulang_2_1 = label_1[label_1['jenispulang'] == 2].shape[0]
len_jenispulang_3_1 = label_1[label_1['jenispulang'] == 3].shape[0]
len_jenispulang_4_1 = label_1[label_1['jenispulang'] == 4].shape[0]
len_jenispulang_5_1 = label_1[label_1['jenispulang'] == 5].shape[0]

print('Jumlah jenispulang 1 pada label 0 adalah: ', len_jenispulang_1_0)
print('Jumlah jenispulang 2 pada label 0 adalah: ', len_jenispulang_2_0)
print('Jumlah jenispulang 3 pada label 0 adalah: ', len_jenispulang_3_0)
print('Jumlah jenispulang 4 pada label 0 adalah: ', len_jenispulang_4_0)
print('Jumlah jenispulang 5 pada label 0 adalah: ', len_jenispulang_5_0)
print('Jumlah jenispulang 1 pada label 1 adalah: ', len_jenispulang_1_1)
print('Jumlah jenispulang 2 pada label 1 adalah: ', len_jenispulang_2_1)
print('Jumlah jenispulang 3 pada label 1 adalah: ', len_jenispulang_3_1)
print('Jumlah jenispulang 4 pada label 1 adalah: ', len_jenispulang_4_1)
print('Jumlah jenispulang 5 pada label 1 adalah: ', len_jenispulang_5_1)

"""Berdasarkan hasil jenispulang diatas urutan tertinggi dari kedua label sama, mulai dari 1,2,4,5,3

## Jumlah kelasrawat berdasarkan label
"""

bpjs['kelasrawat'].astype('category').unique()

len_kelasrawat_1_0 = label_0[label_0['kelasrawat'] == 1].shape[0]
len_kelasrawat_2_0 = label_0[label_0['kelasrawat'] == 2].shape[0]
len_kelasrawat_3_0 = label_0[label_0['kelasrawat'] == 3].shape[0]
len_kelasrawat_1_1 = label_1[label_1['kelasrawat'] == 1].shape[0]
len_kelasrawat_2_1 = label_1[label_1['kelasrawat'] == 2].shape[0]
len_kelasrawat_3_1 = label_1[label_1['kelasrawat'] == 3].shape[0]

print('Jumlah kelasrawat 1 pada label 0 adalah: ', len_kelasrawat_1_0)
print('Jumlah kelasrawat 2 pada label 0 adalah: ', len_kelasrawat_2_0)
print('Jumlah kelasrawat 3 pada label 0 adalah: ', len_kelasrawat_3_0)
print('Jumlah kelasrawat 1 pada label 1 adalah: ', len_kelasrawat_1_1)
print('Jumlah kelasrawat 2 pada label 1 adalah: ', len_kelasrawat_2_1)
print('Jumlah kelasrawat 3 pada label 1 adalah: ', len_kelasrawat_3_1)

"""Berdasarkan hasil diatas kedua label memiliki nilai tertinggi yang sama mulai dari kelasrawat 3,2,1

## Jumlah lama_waktu_hari dirumah sakit (dalam hari)

ps: run feature engineering lama_waktu_hari terlebih dahulu
"""

label_0_baru = bpjs[bpjs['label'] == 0]
label_1_baru = bpjs[bpjs['label'] == 1]

# len_lama_waktu_0_hari_0 = label_0_baru[label_0_baru['lama_waktu_hari'] == 0].shape[0]
# len_lama_waktu_lebihdari0_hari_0 = label_0_baru[label_0_baru['lama_waktu_hari'] > 0].shape[0]
# len_lama_waktu_0_hari_1 = label_1_baru[label_1_baru['lama_waktu_hari'] == 0].shape[0]
# len_lama_waktu_lebihdari0_hari_1 = label_1_baru[label_1_baru['lama_waktu_hari'] > 0].shape[0]

# print('Lama waktu 0 hari pada label 0 adalah: ', len_lama_waktu_0_hari_0)
# print('Lama waktu lebih dari 0 hari pada label 0 adalah: ', len_lama_waktu_lebihdari0_hari_0)
# print('Lama waktu 0 hari pada label 1 adalah: ', len_lama_waktu_0_hari_1)
# print('Lama waktu lebih dari 0 hari pada label 1 adalah: ', len_lama_waktu_lebihdari0_hari_1)

"""Berdasarkaan plot diatas, dapat dikatakan dalam dataset, jenis kelamin paling banyak adalah jenis kelamin P (Perempuan)"""

bpjs.jenkel.value_counts()

bpjs1 = bpjs[bpjs['label']==1]

# with plt.style.context('seaborn'):
#   plt.figure(figsize=(10,8))
#   fig = bpjs.jenkel[bpjs['label']==1].value_counts().plot(kind='bar', color=['lightgreen','coral'])

#   for p in fig.patches:
#     width = p.get_width()
#     height = p.get_height()
#     x, y = p.get_xy()
#     fig.annotate(f'{str(round((height*100)/bpjs1.shape[0],2))+"%"}', (x + width/2, y + height*1.015), ha='center', fontsize=13.5)
#   # Providing the labels and title to the graph
#   plt.xlabel("Jenis Kelamain", fontdict=label_font_dict)
#   plt.ylabel("Jumlah", fontdict=label_font_dict)
#   plt.grid(which='major', linestyle="--", color='lightgrey')
#   plt.minorticks_on()
#   plt.title("Distribusi inefisiensi berdasarkan jenis kelamin\n", fontdict=title_font_dict)

"""# Feature Engineering"""



bpjs['tgldatang'] = bpjs['tgldatang'].astype('datetime64[ns]')
bpjs['tglpulang'] = bpjs['tglpulang'].astype('datetime64[ns]')
bpjs.info()

bpjs['lama_waktu_hari'] = (bpjs['tglpulang'] - bpjs['tgldatang']).dt.days
bpjs

bpjs['diagfktp'] = bpjs['diagfktp'].str.upper()
bpjs['cbg'] = bpjs['cbg'].str.upper()
bpjs['typefaskes'] = bpjs['typefaskes'].str.upper()
bpjs['politujuan'] = bpjs['politujuan'].str.upper()

bpjs = bpjs.drop(['id_peserta', 'kdsa' , 'kdsp', 'kdsr', 'kdsi', 'kdsd','tgldatang', 'tglpulang'], axis=1)
bpjs.info()

cols_list = bpjs.columns
print(len(bpjs['label'].unique()))

for i in cols_list:
  print(i, ' memiliki jumlah nilai uniq sebanyak ', len(bpjs[i].unique()))

# print(bpjs.apply(lambda col: col.unique()).lama_waktu_hari.max())

"""# Modelling"""

bpjs = pd.get_dummies(data=bpjs, columns=['jenkel'])
bpjs.head()

print(len(bpjs['diagfktp'].unique()))
bpjs['diagfktp'] = bpjs['diagfktp'].str.replace(".0$", '', regex=True)
print(len(bpjs['diagfktp'].unique()))

bpjs_copy = bpjs.copy()

# bpjs_copy = bpjs_copy.drop(['dati2'], axis=1)
# bpjs_copy = bpjs_copy.drop(['diagfktp'], axis=1)
bpjs_copy

# from sklearn.preprocessing import LabelEncoder, OneHotEncoder

# ohe = OneHotEncoder(handle_unknown='ignore')
# bpjs_copy['jenkel'] = ohe.fit_transform(bpjs_copy['jenkel']).toarray()
# bpjs_copy

!pip install --upgrade category_encoders

from category_encoders import TargetEncoder

encoder = TargetEncoder()
bpjs_copy[['typefaskes Encoded', 'politujuan Encoded', 'diagfktp Encoded','cbg Encoded']] = encoder.fit_transform(bpjs_copy[['typefaskes', 'politujuan', 'diagfktp','cbg']], bpjs_copy['label'])
# bpjs_copy[] = encoder.fit_transform(bpjs_copy['politujuan'], bpjs_copy['label'])
# bpjs_copy[] = encoder.fit_transform(bpjs_copy['diagfktp'], bpjs_copy['label'])
# bpjs_copy['cbg Encoded'] = encoder.fit_transform(bpjs_copy['cbg'], bpjs_copy['label'])

bpjs_copy = bpjs_copy.drop(['typefaskes', 'diagfktp', 'politujuan', 'cbg'], axis=1)
bpjs_copy.info()

# from sklearn.preprocessing import LabelEncoder
# le = LabelEncoder()
# cols_list = ['typefaskes', 'diagfktp', 'cbg', 'politujuan']
# bpjs_copy[cols_list] = bpjs_copy[cols_list].apply(le.fit_transform)
# bpjs_copy

data_id = bpjs_copy.pop('id')
Y = bpjs_copy.pop('label')
X = bpjs_copy

X

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=1)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

# X_train[X_train == 'biaya']

from sklearn.preprocessing import StandardScaler

scalerr = StandardScaler()
X_train[['dati2', 'biaya', 'lama_waktu_hari', 'usia']] = scalerr.fit_transform(X_train[['dati2', 'biaya','lama_waktu_hari', 'usia']])
X_train

X_test[['dati2', 'biaya', 'lama_waktu_hari', 'usia']] = scalerr.transform(X_test[['dati2', 'biaya', 'lama_waktu_hari', 'usia']])
X_test

# from imblearn.under_sampling import RandomUnderSampler

# rus = RandomUnderSampler(random_state=42)
# X_train_res, y_train_res = rus.fit_resample(X_train, y_train)

# print('After UnderSampling, the shape of train_X: {}'.format(X_train_res.shape))
# print('After UnderSampling, the shape of train_y: {} \n'.format(y_train_res.shape))

# print("After UnderSampling, counts of label '1': {}".format(sum(y_train_res==1)))
# print("After UnderSampling, counts of label '0': {}".format(sum(y_train_res==0)))

# from sklearn.model_selection import train_test_split

# X_train, X_test, y_train, y_test = train_test_split(X_train_res, y_train_res, test_size=0.1, random_state=1)
# X_train.shape, X_test.shape, y_train.shape, y_test.shape

X_train_numpy = X_train.to_numpy()
y_train_numpy = y_train.to_numpy()
X_test_numpy = X_test.to_numpy()
y_test_numpy = y_test.to_numpy()
print(X_train_numpy.shape, X_test_numpy.shape, y_test_numpy.shape, y_train_numpy.shape)

# def get_basic_model():
#   model = tf.keras.Sequential([
#     tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[-1],)),
#     # tf.keras.layers.Dense(64, activation='relu'),
#     # tf.keras.layers.Dropout(0.2),
#     tf.keras.layers.Dense(1, activation='sigmoid')
#   ])

#   model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
#                 loss=tf.keras.losses.BinaryCrossentropy(),
#                 metrics=['accuracy'])
#   return model



# import tensorflow as tf

# model = get_basic_model()
# model.fit(X_train_numpy, y_train_numpy, validation_data=(X_test_numpy, y_test),epochs=5, batch_size=1024)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV as CV

# params={'max_depth': [10, 15, 20], 'n_estimators':[100, 300, 500]}

clf = RandomForestClassifier(n_jobs=-1)
# model = CV(clf, params, n_jobs=-1, verbose=10)
clf.fit(X_train_numpy, y_train_numpy)





"""# Evaluation"""

from sklearn.metrics import plot_confusion_matrix
from sklearn import metrics

y_pred = clf.predict(X_test_numpy)

cfm = metrics.confusion_matrix(y_test_numpy, y_pred.round())
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = cfm, display_labels = [0, 1])

cm_display.plot()
plt.show()

Accuracy = metrics.accuracy_score(y_test_numpy, y_pred.round())
Precision = metrics.precision_score(y_test_numpy, y_pred.round())
Sensitivity_recall = metrics.recall_score(y_test_numpy, y_pred.round())
Specificity = metrics.recall_score(y_test_numpy, y_pred.round(), pos_label=0)

print('accuracy: ', Accuracy)
print('precision: ', Precision)
print('recall: ', Sensitivity_recall)
print('specificity: ', Specificity)

"""# Prediction Tahap-2"""

# !unzip "/content/drive/MyDrive/Healthkathon/Tahap2/Healthkathon 2022 - Machine Learning Tahap 2.zip"

bpjs_tahap2_ori = pd.read_csv("/content/sampling2_healthkathon2022_sep.csv", dtype={'dati2':'int16','typefaskes':'category','jenkel':'category',
                                'politujuan':'category','jenispel':'int8',
                               'kelasrawat':'int8', 'label':'int64', 'usia':'int8', 'kelasrawat':'int8',
                                'kdsa':'category', 'kdsp':'category', 'kdsr':'category', 'kdsi':'category', 'kdsd':'category', 'cbg':'category'})
bpjs_tahap2 = bpjs_tahap2_ori.copy()

bpjs_tahap2.info()

bpjs_tahap2.isna().sum()

bpjs_tahap2 = bpjs_tahap2.replace(['NONE','None', 'NaN', 'nan'], np.nan)

bpjs_tahap2.isna().sum()

bpjs_tahap2['jenkel'] = bpjs_tahap2['jenkel'].fillna('P')
bpjs_tahap2['pisat'] = bpjs_tahap2['pisat'].fillna(bpjs['pisat'].mode()[0])
bpjs_tahap2['jenispulang'] = bpjs_tahap2['jenispulang'].fillna(bpjs['jenispulang'].mode()[0])
bpjs_tahap2['diagfktp'] = bpjs_tahap2['diagfktp'].fillna(bpjs['diagfktp'].mode()[0])
bpjs_tahap2['biaya'] = bpjs_tahap2['biaya'].fillna(0)
bpjs_tahap2['politujuan'] = bpjs_tahap2['politujuan'].fillna(bpjs['politujuan'].mode()[0])

bpjs_tahap2['tgldatang'] = bpjs_tahap2['tgldatang'].astype('datetime64[ns]')
bpjs_tahap2['tglpulang'] = bpjs_tahap2['tglpulang'].astype('datetime64[ns]')
bpjs_tahap2.info()

bpjs_tahap2['lama_waktu_hari'] = (bpjs_tahap2['tglpulang'] - bpjs_tahap2['tgldatang']).dt.days
bpjs_tahap2

bpjs_tahap2['diagfktp'] = bpjs_tahap2['diagfktp'].str.upper()
bpjs_tahap2['cbg'] = bpjs_tahap2['cbg'].str.upper()
bpjs_tahap2['typefaskes'] = bpjs_tahap2['typefaskes'].str.upper()
bpjs_tahap2['politujuan'] = bpjs_tahap2['politujuan'].str.upper()

bpjs_tahap2['diagfktp'] = bpjs_tahap2['diagfktp'].str.replace(".0$", '', regex=True)

bpjs_tahap2 = bpjs_tahap2.drop(['id_peserta', 'kdsa' , 'kdsp', 'kdsr', 'kdsi', 'kdsd','tgldatang', 'tglpulang'], axis=1)
bpjs_tahap2.info()

cols_list = bpjs_tahap2.columns

for i in cols_list:
  print(i, ' memiliki jumlah nilai uniq sebanyak ', len(bpjs_tahap2[i].unique()))

bpjs_copy_tahap2 = bpjs_tahap2.copy()

bpjs_tahap2 = pd.get_dummies(data=bpjs_tahap2, columns=['jenkel'])
bpjs_tahap2.head()

# # bpjs_copy_tahap2 = bpjs_copy_tahap2.drop(['dati2'], axis=1)
# # bpjs_copy_tahap2 = bpjs_copy_tahap2.drop(['diagfktp'], axis=1)
# bpjs_copy_tahap2

data_id_tahap2 = bpjs_tahap2.pop('id')
# Y_tahap2 = bpjs_copy_tahap2.pop('label')
X_tahap2 = bpjs_tahap2

X_tahap2

X_tahap2[['typefaskes Encoded', 'politujuan Encoded', 'diagfktp Encoded','cbg Encoded']] = encoder.transform(X_tahap2[['typefaskes', 'politujuan', 'diagfktp','cbg']])

# X_tahap2.

X_tahap2 = X_tahap2.drop(['typefaskes', 'politujuan', 'diagfktp', 'cbg'], axis=1)
X_tahap2

X_tahap2.info()

X_tahap2[['dati2', 'biaya', 'lama_waktu_hari', 'usia']] = scalerr.transform(X_tahap2[['dati2', 'biaya', 'lama_waktu_hari', 'usia']])
X_tahap2

X_tahap2_numpy = X_tahap2.to_numpy()
# y_tahap2_numpy = y_tahap2.to_numpy()
print(X_tahap2_numpy.shape)

from sklearn.metrics import plot_confusion_matrix
from sklearn import metrics

y_pred_tahap2 = clf.predict(X_tahap2_numpy)

import pandas as pd
series_1 = pd.Series(data_id_tahap2)
series_2 = pd.Series(y_pred_tahap2)

data_csv = pd.DataFrame(columns = ['id', 'label'])

data_csv['id'] = series_1
data_csv['label'] = series_2

data_csv['label'].value_counts()

data_csv.to_csv(index=False)

pip freeze > requirements.txt

